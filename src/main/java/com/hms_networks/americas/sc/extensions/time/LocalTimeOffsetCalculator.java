package com.hms_networks.americas.sc.extensions.time;

import com.ewon.ewonitf.Exporter;
import com.hms_networks.americas.sc.extensions.fileutils.FileConstants;
import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Utility class for calculating the offset between the local time zone and UTC.
 *
 * @since 1.0.0
 * @author HMS Networks, MU Americas Solution Center
 */
public class LocalTimeOffsetCalculator {

  /** Calculated time offset in milliseconds between the local time zone and UTC. */
  private static long timeOffsetMilliseconds = 0;

  /**
   * Gets the currently stored time offset in milliseconds.
   *
   * @return time offset in milliseconds
   */
  public static synchronized long getLocalTimeOffsetMilliseconds() {
    return timeOffsetMilliseconds;
  }

  /**
   * Calculates the offset between UTC time and local time (in milliseconds) and stores the result
   * to be returned by {@link #getLocalTimeOffsetMilliseconds()}. The result is also returned by
   * this method. The local time offset is calculated using a script expression export block
   * descriptor call.
   *
   * @return calculated local time offset (in milliseconds)
   * @throws IOException if unable to perform script expression export block descriptor call or
   *     unable to read/write script expression export block descriptor call result file
   * @throws ParseException if unable to parse script expression export block descriptor call result
   *     file
   */
  public static synchronized long calculateLocalTimeOffsetMilliseconds()
      throws IOException, ParseException {
    // Export the local time result file
    exportLocalTimeResultFile();

    // Parse local time offset value file and store/return
    timeOffsetMilliseconds = parseLocalTimeFile();
    return timeOffsetMilliseconds;
  }

  /**
   * Generates an exported local time result file using the script expression export block
   * descriptor call specified by {@link TimeLibConstants#TIME_OFFSET_LOCAL_TIME_EBD_PREFIX} and the
   * file path specified by {@link TimeLibConstants#TIME_OFFSET_DIRECTORY_PATH} and {@link
   * TimeLibConstants#TIME_OFFSET_LOCAL_TIME_FILE_NAME}.
   *
   * @throws IOException if unable to perform script expression export block descriptor call or
   *     unable to write script expression export block descriptor call result file
   */
  private static synchronized void exportLocalTimeResultFile() throws IOException {
    // Build full export block descriptor call and file path
    final String exportBlockDescriptorCall =
        TimeLibConstants.TIME_OFFSET_LOCAL_TIME_EBD_PREFIX
            + TimeLibConstants.TIME_OFFSET_LOCAL_TIME_FILE_NAME;
    final String exportBlockDescriptorFilePath =
        FileConstants.FILE_URL_PREFIX
            + TimeLibConstants.TIME_OFFSET_DIRECTORY_PATH
            + TimeLibConstants.TIME_OFFSET_LOCAL_TIME_FILE_NAME;

    // Run export block descriptor call to get local time
    Exporter exporter = new Exporter(exportBlockDescriptorCall);
    exporter.ExportTo(exportBlockDescriptorFilePath);
    exporter.close();
  }

  /**
   * Parses and returns the value from the local time offset result file generated by {@link
   * #exportLocalTimeResultFile()}.
   *
   * @return local time offset (in milliseconds)
   * @throws IOException if unable to read script expression export block descriptor call result
   *     file
   * @throws ParseException if unable to parse script expression export block descriptor call result
   *     file
   */
  private static long parseLocalTimeFile() throws IOException, ParseException {
    // Read contents of local time offset result file
    final String exportBlockDescriptorFilePath =
        TimeLibConstants.TIME_OFFSET_DIRECTORY_PATH
            + TimeLibConstants.TIME_OFFSET_LOCAL_TIME_FILE_NAME;
    BufferedReader reader = new BufferedReader(new FileReader(exportBlockDescriptorFilePath));
    String line = reader.readLine();
    reader.close();

    // Remove unnecessary line break from file, if present
    int endIndex = line.indexOf("<BR>");
    if (endIndex > 0) {
      line = line.substring(0, endIndex);
    }

    // Get local time from contents of local time offset result file
    SimpleDateFormat sdf = new SimpleDateFormat(TimeLibConstants.TIME_OFFSET_DATE_FORMAT);
    Date localTimeDateObj = sdf.parse(line);

    // Calculate difference between UTC time (Ewon system time) and local time (in milliseconds)
    Date systemTimeDateObj = new Date(System.currentTimeMillis());
    long diffInMilliseconds = 0;
    if (localTimeDateObj != null) {
      diffInMilliseconds = systemTimeDateObj.getTime() - localTimeDateObj.getTime();
    }

    return diffInMilliseconds;
  }
}
