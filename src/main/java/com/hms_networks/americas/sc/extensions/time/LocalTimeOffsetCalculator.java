package com.hms_networks.americas.sc.extensions.time;

import com.ewon.ewonitf.EWException;
import com.ewon.ewonitf.ScheduledActionManager;
import com.hms_networks.americas.sc.extensions.fileutils.FileAccessManager;

import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * Utility class for calculating the offset between the local time zone and UTC.
 *
 * @since 1.0.0
 * @author HMS Networks, MU Americas Solution Center
 */
public class LocalTimeOffsetCalculator {

  /** Device username used for creating an HTTP connection to the local time offset HTML file. */
  private static String deviceUsername = TimeLibConstants.DEFAULT_DEVICE_USERNAME;

  /** Device password used for creating an HTTP connection to the local time offset HTML file. */
  private static String devicePassword = TimeLibConstants.DEFAULT_DEVICE_PASSWORD;

  /** Calculated time offset in milliseconds between the local time zone and UTC. */
  private static long timeOffsetMilliseconds = 0;

  /**
   * Sets the device username to the specified value.
   *
   * @param deviceUsername device username
   */
  public static synchronized void setDeviceUsername(String deviceUsername) {
    LocalTimeOffsetCalculator.deviceUsername = deviceUsername;
  }

  /**
   * Sets the device password to the specified value.
   *
   * @param devicePassword device password
   */
  public static synchronized void setDevicePassword(String devicePassword) {
    LocalTimeOffsetCalculator.devicePassword = devicePassword;
  }

  /**
   * Gets the currently stored time offset in milliseconds.
   *
   * @return time offset in milliseconds
   */
  public static synchronized long getLocalTimeOffsetMilliseconds() {
    return timeOffsetMilliseconds;
  }

  /**
   * Calculates the offset between UTC time and local time (in milliseconds) and stores the result
   * to be returned by {@link #getLocalTimeOffsetMilliseconds()}. The result is also returned by
   * this method. The local time offset is calculated using an on-device HTML file that is accessed
   * using the default Ewon username and password, or an updated username/password combination
   * specified by calling {@link #setDeviceUsername(String)} and {@link #setDevicePassword(String)}.
   * The username/password combination must be updated to reflect a valid username/password
   * combination on the Ewon Flexy device.
   *
   * @return calculated local time offset (in milliseconds)
   * @throws IOException if unable to read/write local time offset files
   * @throws EWException if unable to create HTTP connection to local time offset HTML file (check
   *     device username and password)
   * @throws ParseException if unable to parse local time offset result file
   */
  public static synchronized long calculateLocalTimeOffsetMilliseconds()
      throws IOException, EWException, ParseException {
    // Generate local time offset files
    generateLocalTimeOffsetFiles();

    // Parse local time offset value file and store/return
    timeOffsetMilliseconds = parseOffsetFromLocalTime();
    return timeOffsetMilliseconds;
  }

  /**
   * Generates a local time offset HTML files and creates an HTTP connection to that page to
   * generate a local time offset result file. The HTTP connection is authenticated using the
   * default Ewon device credentials, or updated device credentials that can be set via {@link
   * #setDeviceUsername(String)} and {@link #setDevicePassword(String)}.
   *
   * @throws IOException if unable to write local time offset HTML file
   * @throws EWException if unable to create HTTP connection to local time offset HTML file (check
   *     device username and password)
   */
  private static synchronized void generateLocalTimeOffsetFiles() throws IOException, EWException {
    // Write local time offset HTML file
    FileAccessManager.writeStringToFile(
        TimeLibConstants.TIME_OFFSET_HTML_FILE_NAME,
        TimeLibConstants.TIME_OFFSET_HTML_FILE_CONTENTS);

    // Load and write local time offset value file
    String httpUserCredentialsAndServer =
        deviceUsername + ":" + devicePassword + "@" + TimeLibConstants.LOOPBACK_IP_ADDRESS;
    ScheduledActionManager.GetHttp(
        httpUserCredentialsAndServer,
        TimeLibConstants.TIME_OFFSET_RESULT_FILE_NAME,
        TimeLibConstants.TIME_OFFSET_HTML_FILE_NAME);
  }

  /**
   * Parses and returns the value from the local time offset result file generated by {@link
   * #generateLocalTimeOffsetFiles()}.
   *
   * @return local time offset
   * @throws IOException if unable to read local time offset result file
   * @throws ParseException if unable to parse local time offset result file
   */
  private static long parseOffsetFromLocalTime() throws IOException, ParseException {
    // Read contents of local time offset result file
    BufferedReader reader =
        new BufferedReader(new FileReader(TimeLibConstants.TIME_OFFSET_RESULT_FILE_NAME));
    String line = reader.readLine();
    reader.close();

    // Remove unnecessary line break from file, if present
    int endIndex = line.indexOf("<BR>");
    if (endIndex > 0) {
      line = line.substring(0, endIndex);
    }

    // Get local time from contents of local time offset result file
    SimpleDateFormat sdf = new SimpleDateFormat(TimeLibConstants.TIME_OFFSET_DATE_FORMAT);
    Date localTimeDateObj = sdf.parse(line);

    // Calculate difference between UTC time (Ewon system time) and local time (in milliseconds)
    Date systemTimeDateObj = new Date(System.currentTimeMillis());
    long diffInMilliseconds = 0;
    if (localTimeDateObj != null) {
      diffInMilliseconds = systemTimeDateObj.getTime() - localTimeDateObj.getTime();
    }

    return diffInMilliseconds;
  }
}
